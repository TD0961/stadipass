name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-healthcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Start MongoDB
        run: docker run -d --name mongo -p 27017:27017 mongo:6

      - name: Start backend
        working-directory: backend
        env:
          PORT: 5000
          JWT_SECRET: ci-secret
          CORS_ORIGINS: http://localhost:5173,http://localhost:3000
          APP_VERSION: ci
          MONGO_URI: mongodb://localhost:27017/stadipass_ci
          ADMIN_EMAIL: admin@example.com
          ADMIN_PASSWORD: secret12
        run: |
          nohup node dist/server.js > server.log 2>&1 &
          echo $! > backend.pid

      - name: Wait for health endpoint
        run: |
          for i in {1..40}; do
            if curl -sf http://localhost:5000/health > /dev/null; then
              echo "Backend is healthy"; exit 0; fi; sleep 1; done; exit 1

      - name: Smoke test auth (signup, login, me, refresh, logout)
        working-directory: backend
        run: |
          set -euo pipefail
          # Signup
          curl -s -o /dev/null -w "%{http_code}\n" -H 'Content-Type: application/json' \
            -d '{"email":"ciuser@example.com","password":"secret12","firstName":"CI","lastName":"User"}' \
            http://localhost:5000/api/auth/signup | grep -qE '201|409'
          # Login and store cookies (body only)
          curl -s -c cookies.txt -H 'Content-Type: application/json' \
            -d '{"email":"ciuser@example.com","password":"secret12"}' \
            http://localhost:5000/api/auth/login > login.json
          TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' login.json)
          test -n "$TOKEN"
          # Me
          curl -s -H "Authorization: Bearer $TOKEN" http://localhost:5000/api/auth/me | grep -q 'email'
          # Refresh
          curl -s -i -b cookies.txt -X POST http://localhost:5000/api/auth/refresh | grep -q 'token'
          # Logout
          curl -s -i -b cookies.txt -X POST http://localhost:5000/api/auth/logout | grep -q '204'

      - name: Smoke test events visibility and publish flow
        working-directory: backend
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          # User login (fresh token in this step)
          curl -s -c user_cookies.txt -H 'Content-Type: application/json' \
            -d '{"email":"ciuser@example.com","password":"secret12"}' \
            http://localhost:5000/api/auth/login > user_login.json
          TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' user_login.json)
          test -n "$TOKEN"
          # Admin login
          curl -s -c admin_cookies.txt -H 'Content-Type: application/json' \
            -d '{"email":"admin@example.com","password":"secret12"}' \
            http://localhost:5000/api/auth/login > admin_login.json
          ADMIN_TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' admin_login.json)
          test -n "$ADMIN_TOKEN"
          # Create stadium
          STADIUM=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -H 'Content-Type: application/json' \
            -d '{"name":"CI Arena","capacity":10000}' \
            http://localhost:5000/api/stadiums)
          STADIUM_ID=$(echo "$STADIUM" | jq -r '._id')
          test -n "$STADIUM_ID"
          # Create event (unpublished)
          EVENT=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -H 'Content-Type: application/json' \
            -d '{"stadium":"'"$STADIUM_ID"'","title":"CI Match","startsAt":"2030-01-01T10:00:00.000Z","ticketCategories":[{"name":"VIP","price":100,"quota":10}],"isPublished":false}' \
            http://localhost:5000/api/events)
          EVENT_ID=$(echo "$EVENT" | jq -r '._id')
          test -n "$EVENT_ID"
          # Non-admin should not see event
          BEFORE=$(curl -s -H "Authorization: Bearer $TOKEN" "http://localhost:5000/api/events?stadium=$STADIUM_ID")
          [ "$(echo "$BEFORE" | jq -r '.items | length')" -eq 0 ] || (echo "Expected no items for non-admin"; echo "$BEFORE"; exit 1)
          # Publish event
          curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -X POST http://localhost:5000/api/events/$EVENT_ID/publish | jq -e '.isPublished == true' > /dev/null
          # Now non-admin should see it
          AFTER=$(curl -s -H "Authorization: Bearer $TOKEN" "http://localhost:5000/api/events?stadium=$STADIUM_ID")
          [ "$(echo "$AFTER" | jq -r '.items | length')" -gt 0 ] || (echo "Expected at least one item for non-admin after publish"; echo "$AFTER"; exit 1)

      - name: Show server logs on failure
        if: failure()
        working-directory: backend
        run: |
          echo "==== server.log ====" && cat server.log || true

      - name: Stop backend
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          docker rm -f mongo || true
