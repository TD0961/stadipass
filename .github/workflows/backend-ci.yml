name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-healthcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Build backend
        working-directory: backend
        run: npm run build


      - name: Start backend
        working-directory: backend
        env:
          PORT: 5000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
          APP_VERSION: ${{ secrets.APP_VERSION }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          nohup node dist/server.js > server.log 2>&1 &
          echo $! > backend.pid

      - name: Wait for health endpoint
        run: |
          for i in {1..40}; do
            if curl -sf http://localhost:5000/health > /dev/null; then
              echo "Backend is healthy"; exit 0; fi; sleep 1; done; exit 1

      - name: Wait for admin user bootstrap
        run: |
          for i in {1..20}; do
            if curl -sf -H 'Content-Type: application/json' \
              -d '{"email":"${{ secrets.ADMIN_EMAIL }}","password":"${{ secrets.ADMIN_PASSWORD }}"}' \
              http://localhost:5000/api/auth/login > /dev/null 2>&1; then
              echo "Admin user ready"; exit 0; fi; sleep 2; done; exit 1

      - name: Smoke test auth (signup, login, me, refresh, logout)
        working-directory: backend
        env:
          TEST_USER_EMAIL: ciuser-${{ github.run_id }}@example.com
          TEST_USER_PASSWORD: secret12
        run: |
          set -euo pipefail
          # Signup (handle existing user)
          echo "Testing user signup..."
          SIGNUP_RESPONSE=$(curl -s -w "%{http_code}" -H 'Content-Type: application/json' \
            -d "{\"email\":\"$TEST_USER_EMAIL\",\"password\":\"$TEST_USER_PASSWORD\",\"firstName\":\"CI\",\"lastName\":\"User\"}" \
            http://localhost:5000/api/auth/signup)
          SIGNUP_CODE=$(echo "$SIGNUP_RESPONSE" | tail -c 4)
          SIGNUP_BODY=$(echo "$SIGNUP_RESPONSE" | head -c -4)
          echo "Signup response code: $SIGNUP_CODE"
          echo "Signup response body: $SIGNUP_BODY"
          if [[ "$SIGNUP_CODE" == "201" ]]; then
            echo "New user created successfully"
          elif [[ "$SIGNUP_CODE" == "409" ]]; then
            echo "User already exists, continuing with login test"
          else
            echo "Signup failed with code $SIGNUP_CODE"
            exit 1
          fi
          
          # Login and store cookies
          echo "Testing user login..."
          LOGIN_RESPONSE=$(curl -s -w "%{http_code}" -c cookies.txt -H 'Content-Type: application/json' \
            -d "{\"email\":\"$TEST_USER_EMAIL\",\"password\":\"$TEST_USER_PASSWORD\"}" \
            http://localhost:5000/api/auth/login)
          LOGIN_CODE=$(echo "$LOGIN_RESPONSE" | tail -c 4)
          LOGIN_BODY=$(echo "$LOGIN_RESPONSE" | head -c -4)
          echo "Login response code: $LOGIN_CODE"
          echo "Login response body: $LOGIN_BODY"
          echo "$LOGIN_BODY" > login.json
          
          if [[ "$LOGIN_CODE" != "200" ]]; then
            echo "Login failed with code $LOGIN_CODE"
            echo "Response: $LOGIN_BODY"
            exit 1
          fi
          
          TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' login.json)
          if [ -z "$TOKEN" ]; then
            echo "Failed to extract token from login response"
            echo "Full response: $LOGIN_BODY"
            exit 1
          fi
          echo "Token extracted successfully: ${TOKEN:0:20}..."

          # Me
          echo "Testing /me endpoint..."
          ME_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" http://localhost:5000/api/auth/me)
          echo "Me response: $ME_RESPONSE"
          echo "$ME_RESPONSE" | grep -q 'email' || (echo "Me endpoint failed"; exit 1)
          echo "Me endpoint successful"
          
          # Refresh
          echo "Testing refresh endpoint..."
          REFRESH_RESPONSE=$(curl -s -i -b cookies.txt -X POST http://localhost:5000/api/auth/refresh)
          echo "Refresh response: $REFRESH_RESPONSE"
          echo "$REFRESH_RESPONSE" | grep -q 'token' || (echo "Refresh endpoint failed"; exit 1)
          echo "Refresh endpoint successful"
          
          # Logout
          echo "Testing logout endpoint..."
          LOGOUT_RESPONSE=$(curl -s -i -b cookies.txt -X POST http://localhost:5000/api/auth/logout)
          echo "Logout response: $LOGOUT_RESPONSE"
          echo "$LOGOUT_RESPONSE" | grep -q '204' || (echo "Logout endpoint failed"; exit 1)
          echo "Logout endpoint successful"
          echo "All auth tests passed!"

      - name: Smoke test events visibility and publish flow
        working-directory: backend
        env:
          TEST_USER_EMAIL: ciuser-${{ github.run_id }}@example.com
          TEST_USER_PASSWORD: secret12
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
          # User login
          curl -s -c user_cookies.txt -H 'Content-Type: application/json' \
            -d "{\"email\":\"$TEST_USER_EMAIL\",\"password\":\"$TEST_USER_PASSWORD\"}" \
            http://localhost:5000/api/auth/login > user_login.json
          TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' user_login.json)
          test -n "$TOKEN"

          # Admin login
          echo "Attempting admin login..."
          curl -s -c admin_cookies.txt -H 'Content-Type: application/json' \
            -d "{\"email\":\"$ADMIN_EMAIL\",\"password\":\"$ADMIN_PASSWORD\"}" \
            http://localhost:5000/api/auth/login > admin_login.json
          echo "Admin login response:" && cat admin_login.json
          ADMIN_TOKEN=$(perl -ne 'print $1 if /"token":"([^"]+)"/' admin_login.json)
          if [ -z "$ADMIN_TOKEN" ]; then
            echo "Failed to extract admin token from response"
            exit 1
          fi
          echo "Admin token extracted successfully"

          # Create stadium
          echo "Creating stadium..."
          STADIUM=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -H 'Content-Type: application/json' \
            -d '{"name":"CI Arena","capacity":10000}' \
            http://localhost:5000/api/stadiums)
          echo "Stadium creation response: $STADIUM"
          STADIUM_ID=$(echo "$STADIUM" | jq -r '._id')
          if [ -z "$STADIUM_ID" ] || [ "$STADIUM_ID" = "null" ]; then
            echo "Failed to create stadium or extract stadium ID"
            exit 1
          fi
          echo "Stadium created with ID: $STADIUM_ID"

          # Create event (unpublished)
          echo "Creating event..."
          EVENT=$(curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -H 'Content-Type: application/json' \
            -d "{\"stadium\":\"$STADIUM_ID\",\"title\":\"CI Match\",\"startsAt\":\"2030-01-01T10:00:00.000Z\",\"ticketCategories\":[{\"name\":\"VIP\",\"price\":100,\"quota\":10}],\"isPublished\":false}" \
            http://localhost:5000/api/events)
          echo "Event creation response: $EVENT"
          EVENT_ID=$(echo "$EVENT" | jq -r '._id')
          if [ -z "$EVENT_ID" ] || [ "$EVENT_ID" = "null" ]; then
            echo "Failed to create event or extract event ID"
            exit 1
          fi
          echo "Event created with ID: $EVENT_ID"

          # Non-admin should not see event
          BEFORE=$(curl -s -H "Authorization: Bearer $TOKEN" "http://localhost:5000/api/events?stadium=$STADIUM_ID")
          [ "$(echo "$BEFORE" | jq -r '.items | length')" -eq 0 ] || (echo "Expected no items for non-admin"; echo "$BEFORE"; exit 1)

          # Publish event
          curl -s -H "Authorization: Bearer $ADMIN_TOKEN" -X POST http://localhost:5000/api/events/$EVENT_ID/publish | jq -e '.isPublished == true' > /dev/null

          # Now non-admin should see it
          AFTER=$(curl -s -H "Authorization: Bearer $TOKEN" "http://localhost:5000/api/events?stadium=$STADIUM_ID")
          [ "$(echo "$AFTER" | jq -r '.items | length')" -gt 0 ] || (echo "Expected at least one item for non-admin after publish"; echo "$AFTER"; exit 1)

      - name: Show server logs on failure
        if: failure()
        working-directory: backend
        run: |
          echo "==== server.log ====" && cat server.log || true

      - name: Stop backend
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
