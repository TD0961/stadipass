name: Frontend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint code
        working-directory: frontend
        run: npm run lint

      - name: Type check
        working-directory: frontend
        run: npm run type-check

      - name: Run tests
        working-directory: frontend
        run: npm run test:coverage

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Start backend for E2E tests
        working-directory: backend
        env:
          PORT: 5000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
          APP_VERSION: ${{ secrets.APP_VERSION }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          npm ci
          npm run build
          nohup node dist/server.js > server.log 2>&1 &
          echo $! > backend.pid

      - name: Wait for backend health
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:5000/health > /dev/null; then
              echo "Backend is healthy"; exit 0; fi; sleep 2; done; exit 1

      - name: Start frontend server
        working-directory: frontend
        run: |
          npm run preview &
          echo $! > frontend.pid

      - name: Wait for frontend
        run: |
          for i in {1..15}; do
            if curl -sf http://localhost:4173 > /dev/null; then
              echo "Frontend is ready"; exit 0; fi; sleep 2; done; exit 1

      - name: Run E2E tests
        working-directory: frontend
        run: |
          # Add E2E test commands here when implemented
          echo "E2E tests will be implemented in Phase 1"

      - name: Cleanup
        if: always()
        run: |
          if [ -f frontend/frontend.pid ]; then kill $(cat frontend/frontend.pid) || true; fi
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run security audit
        working-directory: frontend
        run: npm audit --audit-level moderate

      - name: Run dependency check
        working-directory: frontend
        run: npx audit-ci --config audit-ci.json || true

  lighthouse-audit:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Start backend
        working-directory: backend
        env:
          PORT: 5000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
          APP_VERSION: ${{ secrets.APP_VERSION }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        run: |
          npm ci
          npm run build
          nohup node dist/server.js > server.log 2>&1 &
          echo $! > backend.pid

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:5000/health > /dev/null; then
              echo "Backend is healthy"; exit 0; fi; sleep 2; done; exit 1

      - name: Start frontend
        working-directory: frontend
        run: |
          npm run preview &
          echo $! > frontend.pid

      - name: Wait for frontend
        run: |
          for i in {1..15}; do
            if curl -sf http://localhost:4173 > /dev/null; then
              echo "Frontend is ready"; exit 0; fi; sleep 2; done; exit 1

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Cleanup
        if: always()
        run: |
          if [ -f frontend/frontend.pid ]; then kill $(cat frontend/frontend.pid) || true; fi
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
